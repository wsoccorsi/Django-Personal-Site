{"version":3,"sources":["Components/SpaceXList.js","Components/ToggleBox.js","App.js","serviceWorker.js","index.js"],"names":["SpaceXList","state","SpaceX","displayCall","axios","get","then","res","setState","data","align","class","this","map","launch_date_utc","flight_number","launch_year","React","Component","ToggleBox","props","opened","toggleBox","bind","title","children","className","onClick","App","rel","href","integrity","crossorigin","src","style","backgroundColor","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAGqBA,E,2MAEnBC,MAAQ,CACNC,OAAO,GACPC,aAAc,G,mFAIK,IAAD,OAClBC,IAAMC,IAAI,0CACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEN,OAASK,EAAIE,Y,+BAK/B,OACE,4BACA,6BACA,2BAAOC,MAAM,SAASC,MAAM,SAC5B,sCACA,+CACA,6CAEGC,KAAKX,MAAMC,OAAOW,KAAI,SAAAX,GAAM,OAAI,4BAEA,gCAAOA,EAAOY,gBAAd,KACA,gCAAOZ,EAAOa,cAAd,KACA,gCAAOb,EAAOc,YAAd,KAJA,c,GAxBDC,IAAMC,W,OCyC/BC,E,YAxCd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDnB,MAAQ,CACZoB,QAAQ,GAET,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALC,E,yEAQN,IACJF,EAAWT,KAAKX,MAAhBoB,OACRT,KAAKJ,SAAS,CACba,QAASA,M,+BAID,IAAD,EACkBT,KAAKQ,MAAzBI,EADE,EACFA,MAAOC,EADL,EACKA,SACLJ,EAAWT,KAAKX,MAAhBoB,OAQR,OALCG,EADGH,EACI,gBAEA,gBAIP,yBAAKK,UAAU,OACd,yBAAKA,UAAU,WAAWC,QAASf,KAAKU,WACvC,4BAAQX,MAAM,WAAd,IAA0Ba,EAA1B,MAEAH,GACA,yBAAKV,MAAM,cACTc,Q,GAlCiBR,IAAMC,WCiCfU,MA3Bf,WACE,OACE,yBAAKF,UAAU,OACf,0BAAMG,IAAI,aAAaC,KAAK,2EAA2EC,UAAU,0EAA0EC,YAAY,cACvM,4BAAQC,IAAI,gDACZ,4BAAQA,IAAI,8CAEZ,yBAAKtB,MAAM,YAAYuB,MAAO,CAACC,gBAAgB,UAAWC,cAAe,SACzE,wBAAIzB,MAAM,+BAAV,wBAGA,uBAAGA,MAAM,oBAAT,4DACwB,6BADxB,mFAEwB,6BAFxB,yBAIA,wBAAIA,MAAM,SACV,wBAAIA,MAAM,oBAAV,yBATA,4CALA,IAgBO,uBAAGA,MAAM,kBAChB,kBAAC,EAAD,CAAWa,MAAM,iBACf,kBAAC,EAAD,SChBca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.a1bff5f8.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport default class SpaceXList extends React.Component{\n\n  state = {\n    SpaceX:[],\n    displayCall : false,\n  };\n\n\n  componentDidMount() {\n    axios.get(\"https://api.spacexdata.com/v3/launches\")\n    .then(res => {\n      this.setState({ SpaceX : res.data});\n    })\n  }\n\n  render() {\n    return (\n      <ul>\n      <br/>\n      <table align=\"center\" class=\"table\">\n      <th> Date </th>\n      <th> Flight Number </th>\n      <th> Launch Year </th>\n\n        {this.state.SpaceX.map(SpaceX => <tr>\n\n                                         <td> { SpaceX.launch_date_utc } </td>\n                                         <td> { SpaceX.flight_number } </td>\n                                         <td> { SpaceX.launch_year} </td> </tr> )}\n      </table>\n      </ul>\n    )\n\n  }\n\n}\n","import React, { Component } from \"react\";\n//https://www.golangprograms.com/reactjs-show-hide-component-on-click.html <-- source\nclass ToggleBox extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\topened: false,\n\t\t};\n\t\tthis.toggleBox = this.toggleBox.bind(this);\n\t}\n\n\ttoggleBox() {\n\t\tconst { opened } = this.state;\n\t\tthis.setState({\n\t\t\topened: !opened,\n\t\t});\n\t}\n\n\trender() {\n\t\tvar { title, children } = this.props;\n\t\tconst { opened } = this.state;\n\n\t\tif (opened){\n\t\t\ttitle ='Hide Launches';\n\t\t}else{\n\t\t\ttitle ='Call Launches';\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"box\">\n\t\t\t\t<div className=\"boxTitle\" onClick={this.toggleBox}>\n\t\t\t\t\t<button class=\"Primary\"> {title} </button>\n\t\t\t\t</div>\n\t\t\t\t{opened && (\n\t\t\t\t\t<div class=\"boxContent\">\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ToggleBox;\n","import React from 'react';\nimport './App.css';\nimport SpaceXList from './Components/SpaceXList'\nimport ToggleBox from './Components/ToggleBox'\n// const axios = require('axios');\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"/>\n    <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"></script>\n    <script src=\"https://kit.fontawesome.com/2555c1188f.js\"></script>\n\n    <div class=\"jumbotron\" style={{backgroundColor:'#53B1E1', paddingBottom: '10px'}}>\n    <h1 class=\"fancy display-4 text-center\">\n    SpaceX React Example\n    </h1>\n    <p class=\"lead text-center\"> Below I access the SpaceX API and display relevant data!\n                            <br/> This project shows my ability to play around with API's and display their data!\n                            <br/> Using React and AJAX</p>\n\n    <hr class=\"my-1\"/>\n    <h4 class=\"lead text-center\"> Call This Endpoint: </h4>\n    \"https://api.spacexdata.com/v3/launches\"\n    </div> <i class=\"fas fa-rocket\"></i>\n    <ToggleBox title=\"Show Launches\">\n      <SpaceXList/>\n    </ToggleBox>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}